- guion -
-- prerequisitos --
  - Máquina virtual Fedora 29 con un usuario 'lucas' con el icono del avión en las nubes (skywalker, pq va por las nubes)
    para no interferir con ficheros y directorios existentes, tener prompts al navegar con la consola de comandos.
  - El usuario al empezar esta demo no puede tener una clave ssh ya generada.
  - Instalar extensión "hide clock" para que los videos no tengan incongruencias
  - Usar Firefox para las demos
  - El usuario al empezar la demo debe estar "logueado" en su cliente de correo y en digitalocean.
  - Instalar VSCode con flatpak (flatpak install flathub com.visualstudio.code),
    seleccionar tamaño de fuente 17
  - gsettings set org.gnome.settings-daemon.plugins.media-keys max-screencast-length 600 (10 minutos de screencast con Ctrl Alt Shift R)

- Digital Ocean -
  - Vista general de la interfaz
  - Crear una maquina (sin clave SSH)
    - Explicar el catalogo de maquinas y sistemas operativos
    - Explicar que el SO viene instalado y listo para usar, que dejamos atrás el tiempo de hacer
      click en el asistente de instalación del SO
  - Observar el proceso de aprovisionamiento
  - Entrar en el correo y copiar la contraseña
  - Explicar inconveniencia e implicaciones de seguridad
    de usar contraseñas en entornos escalables/automatizados.
--- corte ---
  - Crear una clave SSH
     -- ssh-keygen (usar un nombre especial haria necesario usar .ssh/config y no queremos entrar hasta ahí)
  - Copiar la parte publica de la clave en la instancia existente
  - Entrar en la máquina vía SSH demostrando que no hace falta contraseña
  - Abrir clave pública en un editor de textos
  - Añadir clave SSH al llavero de DigitalOcean manualmente
  - Destruir instancia existente, y crear otra con la clave SSH
  - Entrar a la maquina via SSH demostrando la ausencia de clave
--- corte ---
  - "Bien, hemos visto como gestionar una máquina manualmente, pero el verdadero poder está en la capacidad de
     escalar estas operaciones en múltiples maquinas. Para ello Digital Ocean cuenta con una API, un conjunto
     de funciones, que podemos consumir remotamente con un lenguaje de scripting como Python. Esto nos abre la
     posibilidad de orquestar nuestro rebaño de servidores"
  - Generar una clave efimera para consumir la API
  - exportar variable de entorno MI_TOKEN en la consola
  - pip3 install --user python-digitalocean
SCRIPT: digitalocean/99_destruir_maquinas.py
  - Arrancar una maquina y imprimir lista por pantalla, luego arrancar otra y repetir
  - Usar un for para iterar sobre la lista y destruir todas las maquinas arrancadas
SCRIPT: digitalocean/01_una_maquina.py
  - Volver a la interfaz y ver como la maquina arranca y es mostrada, copiar la IP y hacer SSH
  - Destruir la maquina
-- corte ---
  - "Usar la API para crear una máquina individual no tiene mucha utilidad, sin embargo, cuando queremos crear
     multiples instancias podemos usar un bucle y crear un conjunto"
SCRIPT: digitalocean/02_multiples_maquinas.py
  - "Para no acumular maquinas nuevas, destruimos las que tenemos"
SCRIPT: digitalocean/03_destruir_antes_de_crear.py
SCRIPT: digitalocean/04_crear_fichero_inventario.py

-- Balanceador de carga --
TODO
-- Temas a comentar por encima -
- Imagenes propias del SO
- Base de datos gestionadas
- Almacenamiento como servicio
